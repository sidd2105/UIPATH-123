<Activity mc:Ignorable="sap sap2010" x:Class="UnusedVariables_IsVariableUsedInContainer" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sx="clr-namespace:System.Xml;assembly=System.Xml" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property sap2010:Annotation.AnnotationText="Name of variable to be checked." Name="in_VariableName" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="Node which contains the specified variable." Name="in_ContainerNode" Type="InArgument(sx:XmlNode)" />
    <x:Property sap2010:Annotation.AnnotationText="Result of the check whether the given variable is used in the specified string." Name="out_VariableUsed" Type="OutArgument(x:Boolean)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>868.666666666667,2746.66666666667</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>UnusedVariables_IsVariableUsedInContainer_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="23">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Xml.XPath</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="21">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.Runtime.WindowsRuntime</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Verifies whether a variable is used in a container (i.e., sequence, flowchart or state machine).&#xA;Variables can be used in activity nodes in two cases:&#xA;- As text value of a node, as it happens in the Assign activity. In this case, it is also necessary to check whether the variable is used in a string (e.g., &quot;The value of 'Name' is: &quot;).&#xA;- As attribute of a node, as it happens in the Type Into activity." DisplayName="Is Variable Used In Container" sap:VirtualizedContainerService.HintSize="878.666666666667,2682" sap2010:WorkflowViewState.IdRef="Sequence_9">
    <Sequence.Variables>
      <Variable x:TypeArguments="sx:XmlNodeList" Name="NodesWithTextValue" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <Assign sap2010:Annotation.AnnotationText="Initially assumes that the variable is not used in the container." DisplayName="Assign out_VariableUsed (initialization)" sap:VirtualizedContainerService.HintSize="836.666666666667,107.333333333333" sap2010:WorkflowViewState.IdRef="Assign_3">
      <Assign.To>
        <OutArgument x:TypeArguments="x:Boolean">[out_VariableUsed]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:Boolean">False</InArgument>
      </Assign.Value>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </Assign>
    <Assign sap2010:Annotation.AnnotationText="Retrieves all nodes in the container that have the variable name in their values, except Reference and DebugSymbol.Symbol, since they cannot use variables." DisplayName="Assign NodesWithValue" sap:VirtualizedContainerService.HintSize="836.666666666667,157.333333333333" sap2010:WorkflowViewState.IdRef="Assign_1">
      <Assign.To>
        <OutArgument x:TypeArguments="sx:XmlNodeList">[NodesWithTextValue]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="sx:XmlNodeList">[in_ContainerNode.SelectNodes(".//*[text()[contains(., '"+in_VariableName+"')] and not(local-name()='Reference') and not(local-name()='DebugSymbol.Symbol')]")]</InArgument>
      </Assign.Value>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </Assign>
    <ui:ForEach x:TypeArguments="sx:XmlNode" sap2010:Annotation.AnnotationText="Looks for variable usage in text values." DisplayName="For each node with text value" sap:VirtualizedContainerService.HintSize="836.666666666667,632.666666666667" sap2010:WorkflowViewState.IdRef="ForEach`1_2" Values="[NodesWithTextValue]">
      <ui:ForEach.Body>
        <ActivityAction x:TypeArguments="sx:XmlNode">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="sx:XmlNode" Name="NodeWithTextValue" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="526,463.333333333333" sap2010:WorkflowViewState.IdRef="Sequence_10">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Is Variable Used In String Value (text value)" sap:VirtualizedContainerService.HintSize="484,86.6666666666667" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_1" UnSafe="False" WorkflowFileName="Common\IsVariableUsedInStringValue.xaml">
              <ui:InvokeWorkflowFile.Arguments>
                <InArgument x:TypeArguments="x:String" x:Key="in_VariableName">[in_VariableName]</InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="in_StringValue">[NodeWithTextValue.InnerText]</InArgument>
                <OutArgument x:TypeArguments="x:Boolean" x:Key="out_VariableUsed">[out_VariableUsed]</OutArgument>
              </ui:InvokeWorkflowFile.Arguments>
            </ui:InvokeWorkflowFile>
            <If sap2010:Annotation.AnnotationText="Interrupts the loop if an usage of the variable is found." Condition="[out_VariableUsed]" DisplayName="If variable is used in text value" sap:VirtualizedContainerService.HintSize="484,244.666666666667" sap2010:WorkflowViewState.IdRef="If_1">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If.Then>
                <ui:Break DisplayName="Break search for variable usage in text values" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Break_1" />
              </If.Then>
            </If>
          </Sequence>
        </ActivityAction>
      </ui:ForEach.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:ForEach>
    <If sap2010:Annotation.AnnotationText="Looks for variable usage in attributes." Condition="[Not out_VariableUsed]" DisplayName="If variable usage was not found in text values" sap:VirtualizedContainerService.HintSize="836.666666666667,1477.33333333333" sap2010:WorkflowViewState.IdRef="If_6">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <Sequence sap:VirtualizedContainerService.HintSize="690.666666666667,1292.66666666667" sap2010:WorkflowViewState.IdRef="Sequence_15">
          <Sequence.Variables>
            <Variable x:TypeArguments="sx:XmlNodeList" Name="AttributeNodes" />
          </Sequence.Variables>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Assign sap2010:Annotation.AnnotationText="Retrieves all attributes from nodes in container that have the name of the variable in their value." DisplayName="Assign NodesWithAttribute" sap:VirtualizedContainerService.HintSize="648.666666666667,124" sap2010:WorkflowViewState.IdRef="Assign_2">
            <Assign.To>
              <OutArgument x:TypeArguments="sx:XmlNodeList">[AttributeNodes]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="sx:XmlNodeList">[in_ContainerNode.SelectNodes(".//@*[contains(., '"+in_VariableName+"') and not(name()='DisplayName') and not(name()='sap2010:Annotation.AnnotationText') and not(name()='x:TypeArguments') and not(name()='sap2010:WorkflowViewState.IdRef')]")]</InArgument>
            </Assign.Value>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </Assign>
          <ui:ForEach x:TypeArguments="sx:XmlNode" DisplayName="For each attribute" sap:VirtualizedContainerService.HintSize="648.666666666667,1036.66666666667" sap2010:WorkflowViewState.IdRef="ForEach`1_8" Values="[AttributeNodes]">
            <ui:ForEach.Body>
              <ActivityAction x:TypeArguments="sx:XmlNode">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="sx:XmlNode" Name="Attribute" />
                </ActivityAction.Argument>
                <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="612,898" sap2010:WorkflowViewState.IdRef="Sequence_14">
                  <Sequence.Variables>
                    <Variable x:TypeArguments="x:String" Name="TemporaryAttributeValue" />
                  </Sequence.Variables>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <If sap2010:Annotation.AnnotationText="From UiPath Studio 2020.4, there are changes in the way the Invoke Workflow File activity is represented in the XAML file: Instead of having variables used in arguments as text values of InArgument/OutArgument/InOutArgument nodes, variables are written as values of ExpressionText attributes of mva:VisualBasicValue nodes, which are children of InArgument/OutArgument/InOutArgument nodes.&#xD;&#xA;In addition, expressions in ExpressionText attributes are not enclosed in squared brackets, as it happens with expressions in other attributes.&#xD;&#xA;In order not to break the compatibility of the &quot;IsVariableUsedInStringValue.xaml&quot; workflow, a special handling of ExpressionText attributes is done in this workflow by enclosing their values in squared brackets before passing them to the &quot;IsVariableUsedInStringValue.xaml&quot; workflow." Condition="[Attribute.Name = &quot;ExpressionText&quot;]" DisplayName="If ExpressionText attribute" sap:VirtualizedContainerService.HintSize="570,394.666666666667" sap2010:WorkflowViewState.IdRef="If_7">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <If.Then>
                      <Assign DisplayName="Assign Attribute.Value (ExpressionText attribute)" sap:VirtualizedContainerService.HintSize="262,62" sap2010:WorkflowViewState.IdRef="Assign_6">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:String">[TemporaryAttributeValue]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:String">[String.Format("[{0}]", Attribute.Value)]</InArgument>
                        </Assign.Value>
                      </Assign>
                    </If.Then>
                    <If.Else>
                      <Assign DisplayName="Assign Attribute.Value (Not ExpressionText attribute)" sap:VirtualizedContainerService.HintSize="262,62" sap2010:WorkflowViewState.IdRef="Assign_7">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:String">[TemporaryAttributeValue]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:String">[Attribute.Value]</InArgument>
                        </Assign.Value>
                      </Assign>
                    </If.Else>
                  </If>
                  <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Is Variable Used In String Value (attribute value)" sap:VirtualizedContainerService.HintSize="570,86.6666666666667" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_4" UnSafe="False" WorkflowFileName="Common\IsVariableUsedInStringValue.xaml">
                    <ui:InvokeWorkflowFile.Arguments>
                      <InArgument x:TypeArguments="x:String" x:Key="in_VariableName">
                        <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_VariableName" />
                      </InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="in_StringValue">
                        <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="TemporaryAttributeValue" />
                      </InArgument>
                      <OutArgument x:TypeArguments="x:Boolean" x:Key="out_VariableUsed">
                        <mva:VisualBasicReference x:TypeArguments="x:Boolean" ExpressionText="out_VariableUsed" />
                      </OutArgument>
                    </ui:InvokeWorkflowFile.Arguments>
                  </ui:InvokeWorkflowFile>
                  <If sap2010:Annotation.AnnotationText="Interrupts the loop if an usage of the variable is found." Condition="[out_VariableUsed]" DisplayName="If variable is used in an attribute" sap:VirtualizedContainerService.HintSize="570,244.666666666667" sap2010:WorkflowViewState.IdRef="If_5">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <If.Then>
                      <ui:Break DisplayName="Break search for variable usage in attributes" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="Break_4" />
                    </If.Then>
                  </If>
                </Sequence>
              </ActivityAction>
            </ui:ForEach.Body>
          </ui:ForEach>
        </Sequence>
      </If.Then>
    </If>
  </Sequence>
</Activity>